{
  "name": "cabinetkv",
  "description": "Brainless Key/Value storage for MongoDB",
  "version": "0.0.1",
  "author": {
    "name": "Trey Griffith",
    "email": "trey.griffith@gmail.com"
  },
  "keywords": [
    "mongoose",
    "mongodb",
    "storage",
    "cache",
    "kv",
    "key/value"
  ],
  "dependencies": {
    "cellar": ">=0.0.2"
  },
  "devDependencies": {},
  "main": "./index.js",
  "engines": {
    "node": "0.8.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/treygriffith/cabinet.git"
  },
  "homepage": "https://github.com/treygriffith/cabinet",
  "readme": "Cabinet\n==============\n### Brainless Key/Value storage for MongoDB\n\n`Cabinet` is a tiny module built on top of [Cellar](http://github.com/treygriffith/cellar) (itself built on top of [Mongoose](http://www.mongoosejs.com)) for a simple Key/Value store.\n\nInstallation\n-------------\n\nThrough [NPM](http://www.npmjs.org)\n``` bash\n$ npm install cabinetkv\n```\n\n or using Git\n``` bash\n$ git clone git://github.com/treygriffith/cabinet.git node_modules/cabinetkv/\n```\n\nAPI/How to Use\n-----------\n\n#### Instantiate Cabinet with a collection name, and mongoDB details or a Mongoose instance\n\n``` javascript\nCabinet = require('cabinetkv');\n\n// with Mongoose instance\n\nvar mongoose = require('mongoose');\nvar mongoUrl = 'mongodb://' + db.user + ':' + db.pass + '@' + db.host + ':' + db.port + '/' + db.name;\nmongoose.connect(mongoUrl);\n\nvar cabinet = new Cabinet('mykvstore', mongoose, {maxAge:3})\n\n\n// with mongoDB details (maxAge of -1 stores docs forever)\n\nvar cabinet = new Cabinet('mykvstore', {user:db.user, pass:db.pass, host:db.host, port:db.port, name:db.name}, {maxAge:-1});\n```\n\n#### Cabinet exposes 2 methods:\n\n1. `set` - Store a value\n\n  ``` javascript\n  // Store a value with a specific key\n  cabinet.set('mykey', 'myvalue', function(err, key) {\n      if(err) {\n        console.error(err);\n        return;\n      }\n      console.log(key); // prints 'mykey'\n  });\n\n  // Store a value with a randomly generated key\n  cabinet.set('myvalue', function(err, key) {\n      if(err) {\n        console.error(err);\n        return;\n      }\n      console.log(key); // prints a random 16 character string\n  });\n\n2. `get` - Retrieve a value\n\n  ``` javascript\n  cabinet.get('mykey', function(err, val) {\n      if(err) {\n        console.error(err);\n        return;\n      }\n      console.log(val); // prints 'myvalue'\n  });\n",
  "_id": "cabinetkv@0.0.1",
  "dist": {
    "shasum": "de892f6275b4a14f920691b45a58c7851c894e74",
    "tarball": "http://registry.npmjs.org/cabinetkv/-/cabinetkv-0.0.1.tgz"
  },
  "maintainers": [
    {
      "name": "treygriffith",
      "email": "trey.griffith@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "de892f6275b4a14f920691b45a58c7851c894e74",
  "_from": "cabinetkv@",
  "_resolved": "https://registry.npmjs.org/cabinetkv/-/cabinetkv-0.0.1.tgz",
  "bugs": {
    "url": "https://github.com/treygriffith/cabinet/issues"
  }
}
