{
  "name": "cellar",
  "description": "Brainless short-term single-document storage for MongoDB",
  "version": "0.0.3",
  "author": {
    "name": "Trey Griffith",
    "email": "trey.griffith@gmail.com"
  },
  "keywords": [
    "mongoose",
    "mongodb",
    "storage",
    "cache"
  ],
  "dependencies": {
    "mongoose": "3.x"
  },
  "devDependencies": {},
  "main": "./index.js",
  "engines": {
    "node": "0.8.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/treygriffith/cellar.git"
  },
  "homepage": "https://github.com/treygriffith/cellar",
  "readme": "Cellar\n==============\n### Brainless short-term single-document storage for MongoDB\n\n`Cellar` is a small module built on top of [Mongoose](http://www.mongoosejs.com) to allow easy short-term storage of simple schemas.\n\nIt's primary purpose is for storage of OAuth tokens and other data that you need cached for a short period.\n\nInstallation\n-------------\n\nThrough [NPM](http://www.npmjs.org)\n``` bash\n$ npm install cellar\n```\n\n or using Git\n``` bash\n$ git clone git://github.com/treygriffith/cellar.git node_modules/cellar/\n```\n\nAPI/How to Use\n-----------\n\n#### Instantiate Cellar with a collection name, mongoDB details or a Mongoose instance, and a schema\n\n``` javascript\n// with Mongoose and Mongoose Schema\n\nvar mongoose = require('mongoose');\nvar mongoUrl = 'mongodb://' + db.user + ':' + db.pass + '@' + db.host + ':' + db.port + '/' + db.name;\nmongoose.connect(mongoUrl);\n\nvar myschema = mongoose.Schema({hello: String, stored_by: String});\n\nvar cellar = new Cellar('mystore', mongoose, myschema, {maxAge:3});\n\n\n// with mongoDB details and object literal of Schema (maxAge of -1 stores docs forever)\n\nvar cellar = new Cellar('mystore', {user:db.user, pass:db.pass, host:db.host, port:db.port, name:db.name}, {hello: String, stored_by: String}, {maxAge:-1});\n```\n\n#### Cellar exposes 3 methods:\n\n1. `store` - Create and update documents in the collection\n\n\t``` javascript\n\t// Create Doc/Insert\n\tcellar.store({hello: \"world\", stored_by: \"cellar\"}, function(err, doc) {\n\t\tif(err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(doc,'sucessfully stored');\n\t\t}\n\t});\n\n\t// Update existing\n\t// As of 0.0.2, this syntax will upsert, resulting in a document of {hello: \"planet\", stored_by: \"cellar\"}\n\tcellar.store({stored_by: \"cellar\"}, {hello: \"planet\"}, function(err, doc) {\n\t\tif(err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(doc,'sucessfully updated');\n\t\t}\n\t})\n\t```\n\n2. `retrieve` - Find and return single documents in the collection\n\n\t``` javascript\n\t// Find whole doc\n\tcellar.retrieve({stored_by: \"cellar\"}, function(err, doc) {\n\t\tif(err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(doc,'found');\n\t\t}\n\t});\n\n\t// Find doc with only 1 field returned\n\tcellar.retrieve({stored_by: \"cellar\"}, [\"hello\"], function(err, doc) {\n\t\tif(err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(doc,'found');\n\t\t}\n\t});\n\t```\n\n3. `retrieve_field` - Find and return the contents of a single field on a single document in the collection\n\n\t``` javascript\n\t// Find contents of one field\n\tcellar.retrieve_field({stored_by: \"cellar\"}, \"hello\", function(err, hello) {\n\t\tfunction(err, doc) {\n\t\tif(err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log('hello '+hello); // prints 'hello world'\n\t\t}\n\t})\n\t```\n",
  "_id": "cellar@0.0.3",
  "dist": {
    "shasum": "6fe12a1b7904661a8096cb68ee4259f163c6115f",
    "tarball": "http://registry.npmjs.org/cellar/-/cellar-0.0.3.tgz"
  },
  "maintainers": [
    {
      "name": "treygriffith",
      "email": "trey.griffith@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "6fe12a1b7904661a8096cb68ee4259f163c6115f",
  "_from": "cellar@>=0.0.2",
  "_resolved": "https://registry.npmjs.org/cellar/-/cellar-0.0.3.tgz",
  "bugs": {
    "url": "https://github.com/treygriffith/cellar/issues"
  }
}
